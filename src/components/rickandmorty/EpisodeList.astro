---
import PaginationR from '../PaginationR.astro';

const apiUrl = 'https://rickandmortyapi.com/api/episode';

// Obtener parámetros de la URL
const url = new URL(Astro.url.pathname + Astro.url.search, Astro.url.origin);
const pageParam = Number(url.searchParams.get('page') ?? 1);
const itemsPerPage = 20; // Número de episodios por página (máximo permitido por la API)
const currentPage = Math.max(pageParam, 1);

// Realiza la solicitud a la API para la página actual
const res = await fetch(`${apiUrl}?page=${currentPage}`);
const data = await res.json();
const episodes = data.results;
const totalPages = data.info.pages;

interface Episode {
  id: number;
  name: string;
  air_date: string;
  episode: string;
  characters: string[];
  url: string;
  created: string;
}
---

<div class="container mx-auto p-8">
  <h1 class="text-4xl font-bold text-valorant mb-8">Rick and Morty Episodes</h1>

  <!-- Lista de episodios para la página actual -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
    {
      episodes.map((episode: Episode) => (
        <Fragment key={episode.id}>
          <a href={`/rickandmorty/episodes/${episode.id}`} class="block bg-valorant-dark p-4 rounded-lg shadow-lg hover:shadow-2xl transition-shadow duration-300">
            <h2 class="text-2xl font-semibold text-valorant mb-2">{episode.name}</h2>
            <p class="text-lg">Air Date: {episode.air_date}</p>
            <p class="text-lg">Episode: {episode.episode}</p>
            <p class="text-lg">Characters: {episode.characters.length}</p>
            <p class="text-lg">Created: {new Date(episode.created).toLocaleDateString()}</p>
          </a>
        </Fragment>
      ))
    }
  </div>

  <!-- Componente de paginación -->
  <PaginationR totalPages={totalPages} currentPage={currentPage} />
</div>
